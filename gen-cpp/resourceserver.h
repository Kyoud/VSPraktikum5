/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef resourceserver_H
#define resourceserver_H

#include <thrift/TDispatchProcessor.h>
#include "lock_types.h"



class resourceserverIf {
 public:
  virtual ~resourceserverIf() {}
  virtual void lock() = 0;
  virtual void unlock() = 0;
  virtual void request(const std::string& name, const int64_t time) = 0;
  virtual void ack(const std::string& name, const int64_t time) = 0;
};

class resourceserverIfFactory {
 public:
  typedef resourceserverIf Handler;

  virtual ~resourceserverIfFactory() {}

  virtual resourceserverIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(resourceserverIf* /* handler */) = 0;
};

class resourceserverIfSingletonFactory : virtual public resourceserverIfFactory {
 public:
  resourceserverIfSingletonFactory(const boost::shared_ptr<resourceserverIf>& iface) : iface_(iface) {}
  virtual ~resourceserverIfSingletonFactory() {}

  virtual resourceserverIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(resourceserverIf* /* handler */) {}

 protected:
  boost::shared_ptr<resourceserverIf> iface_;
};

class resourceserverNull : virtual public resourceserverIf {
 public:
  virtual ~resourceserverNull() {}
  void lock() {
    return;
  }
  void unlock() {
    return;
  }
  void request(const std::string& /* name */, const int64_t /* time */) {
    return;
  }
  void ack(const std::string& /* name */, const int64_t /* time */) {
    return;
  }
};


class resourceserver_lock_args {
 public:

  resourceserver_lock_args() {
  }

  virtual ~resourceserver_lock_args() throw() {}


  bool operator == (const resourceserver_lock_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const resourceserver_lock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const resourceserver_lock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class resourceserver_lock_pargs {
 public:


  virtual ~resourceserver_lock_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class resourceserver_lock_result {
 public:

  resourceserver_lock_result() {
  }

  virtual ~resourceserver_lock_result() throw() {}


  bool operator == (const resourceserver_lock_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const resourceserver_lock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const resourceserver_lock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class resourceserver_lock_presult {
 public:


  virtual ~resourceserver_lock_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class resourceserver_unlock_args {
 public:

  resourceserver_unlock_args() {
  }

  virtual ~resourceserver_unlock_args() throw() {}


  bool operator == (const resourceserver_unlock_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const resourceserver_unlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const resourceserver_unlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class resourceserver_unlock_pargs {
 public:


  virtual ~resourceserver_unlock_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class resourceserver_unlock_result {
 public:

  resourceserver_unlock_result() {
  }

  virtual ~resourceserver_unlock_result() throw() {}


  bool operator == (const resourceserver_unlock_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const resourceserver_unlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const resourceserver_unlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class resourceserver_unlock_presult {
 public:


  virtual ~resourceserver_unlock_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _resourceserver_request_args__isset {
  _resourceserver_request_args__isset() : name(false), time(false) {}
  bool name;
  bool time;
} _resourceserver_request_args__isset;

class resourceserver_request_args {
 public:

  resourceserver_request_args() : name(), time(0) {
  }

  virtual ~resourceserver_request_args() throw() {}

  std::string name;
  int64_t time;

  _resourceserver_request_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_time(const int64_t val) {
    time = val;
  }

  bool operator == (const resourceserver_request_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(time == rhs.time))
      return false;
    return true;
  }
  bool operator != (const resourceserver_request_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const resourceserver_request_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class resourceserver_request_pargs {
 public:


  virtual ~resourceserver_request_pargs() throw() {}

  const std::string* name;
  const int64_t* time;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class resourceserver_request_result {
 public:

  resourceserver_request_result() {
  }

  virtual ~resourceserver_request_result() throw() {}


  bool operator == (const resourceserver_request_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const resourceserver_request_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const resourceserver_request_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class resourceserver_request_presult {
 public:


  virtual ~resourceserver_request_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _resourceserver_ack_args__isset {
  _resourceserver_ack_args__isset() : name(false), time(false) {}
  bool name;
  bool time;
} _resourceserver_ack_args__isset;

class resourceserver_ack_args {
 public:

  resourceserver_ack_args() : name(), time(0) {
  }

  virtual ~resourceserver_ack_args() throw() {}

  std::string name;
  int64_t time;

  _resourceserver_ack_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_time(const int64_t val) {
    time = val;
  }

  bool operator == (const resourceserver_ack_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(time == rhs.time))
      return false;
    return true;
  }
  bool operator != (const resourceserver_ack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const resourceserver_ack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class resourceserver_ack_pargs {
 public:


  virtual ~resourceserver_ack_pargs() throw() {}

  const std::string* name;
  const int64_t* time;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class resourceserver_ack_result {
 public:

  resourceserver_ack_result() {
  }

  virtual ~resourceserver_ack_result() throw() {}


  bool operator == (const resourceserver_ack_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const resourceserver_ack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const resourceserver_ack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class resourceserver_ack_presult {
 public:


  virtual ~resourceserver_ack_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class resourceserverClient : virtual public resourceserverIf {
 public:
  resourceserverClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  resourceserverClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void lock();
  void send_lock();
  void recv_lock();
  void unlock();
  void send_unlock();
  void recv_unlock();
  void request(const std::string& name, const int64_t time);
  void send_request(const std::string& name, const int64_t time);
  void recv_request();
  void ack(const std::string& name, const int64_t time);
  void send_ack(const std::string& name, const int64_t time);
  void recv_ack();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class resourceserverProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<resourceserverIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (resourceserverProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_lock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_request(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  resourceserverProcessor(boost::shared_ptr<resourceserverIf> iface) :
    iface_(iface) {
    processMap_["lock"] = &resourceserverProcessor::process_lock;
    processMap_["unlock"] = &resourceserverProcessor::process_unlock;
    processMap_["request"] = &resourceserverProcessor::process_request;
    processMap_["ack"] = &resourceserverProcessor::process_ack;
  }

  virtual ~resourceserverProcessor() {}
};

class resourceserverProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  resourceserverProcessorFactory(const ::boost::shared_ptr< resourceserverIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< resourceserverIfFactory > handlerFactory_;
};

class resourceserverMultiface : virtual public resourceserverIf {
 public:
  resourceserverMultiface(std::vector<boost::shared_ptr<resourceserverIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~resourceserverMultiface() {}
 protected:
  std::vector<boost::shared_ptr<resourceserverIf> > ifaces_;
  resourceserverMultiface() {}
  void add(boost::shared_ptr<resourceserverIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void lock() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lock();
    }
    ifaces_[i]->lock();
  }

  void unlock() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unlock();
    }
    ifaces_[i]->unlock();
  }

  void request(const std::string& name, const int64_t time) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->request(name, time);
    }
    ifaces_[i]->request(name, time);
  }

  void ack(const std::string& name, const int64_t time) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ack(name, time);
    }
    ifaces_[i]->ack(name, time);
  }

};



#endif
